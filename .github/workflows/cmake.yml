name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    env:
      CI_COMPILER: ${{ matrix.c_compiler }}
      QT_VERSION: '6.8.0'
      QT_HOST: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}
      QT_ARCH: ${{ matrix.os == 'windows-latest' && 'win64_msvc2022_64' || 'linux_gcc_64' }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Create Qt dir on Linux and install deps
      if: matrix.os != 'windows-latest'
      run: |
        sudo mkdir /Qt
        sudo chmod 777 /Qt
        sudo add-apt-repository universe
        sudo apt install libfuse2

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version:      ${{ env.QT_VERSION }}
        host:         ${{ env.QT_HOST }}
        target:       desktop
        arch:         ${{ env.QT_ARCH }}
        #dir:          ${{ runner.temp }}
        dir:          '/'
        setup-python: false

    - name: Fix env vars if needed
      uses: actions/github-script@v7
      with:
        script: |
          if (process.env.QT_ROOT_DIR) {
            core.exportVariable('QT_ROOT_DIR', process.env.QT_ROOT_DIR.replace(/[/\\]bin[/\\]qmake[^/\\]*/i, ""));
            core.exportVariable('Qt6_DIR', process.env.QT_ROOT_DIR + "/lib/cmake/Qt6");
            core.addPath(process.env.QT_ROOT_DIR + "/bin");
          }
          if (process.env.QT_PLUGIN_PATH)
            core.exportVariable('QT_PLUGIN_PATH', process.env.QT_PLUGIN_PATH.replace(/[/\\]bin[/\\]qmake[^/\\]*/i, ""));
          if (process.env.QML2_IMPORT_PATH)
            core.exportVariable('QML2_IMPORT_PATH', process.env.QML2_IMPORT_PATH.replace(/[/\\]bin[/\\]qmake[^/\\]*/i, ""));

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_PREFIX_PATH:PATH="${{ env.QT_ROOT_DIR }}"
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.c_compiler }}-${{ matrix.os }}
        path: build/

    - name: Pack
      shell: pwsh
      run: ./ci/pack.ps1

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-${{ matrix.c_compiler }}-${{ matrix.os }}
        path: |
          build/package/
          build/*.7z
